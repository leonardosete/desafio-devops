name: 4-Create TLS Secret - Certificate
on:
  pull_request:
    branches: [deploy-infra]

  workflow_dispatch:
    inputs:
      create-secret:
        description: 'Do you want to create TLS Secrets?'
        default: false
        required: false
        type: boolean

## Variables available in this workflow
env: 
  PROJECT_ID: "leosete-devops-4"
  REGION: "us-central1"
  CLUSTER_NAME: "tembici-cluster-prod"
  NS_ENV_DEV: "tembici-sre-apps-dev"
  NS_ENV_HLG: "tembici-sre-apps-hlg"
  NS_ENV_PRD: "tembici-sre-apps-prod"
  SECRET_TLS: "my-tls-secret"

jobs:
  gke_cluster:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Actions
        uses: actions/checkout@v3

      - id: auth
        name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v0
        with:
          credentials_json: ${{ secrets.GCP_TERRAFORM_SVC_ACCOUNT }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0
          
      - name: Get Kubeconfig Credentials
        if: ${{ inputs.create-secret == true }}
        uses: 'google-github-actions/get-gke-credentials@v0'
        with:
          cluster_name: ${{ env.CLUSTER_NAME }}
          location: ${{ env.REGION }}

      - name: Check TLS Secret
        if: ${{ inputs.create-secret == true }}
        run: |
          echo "TLS_DEV=`kubectl get secrets --namespace $NS_ENV_DEV |grep $SECRET_TLS |awk '{print $1}'`" >> $GITHUB_ENV
          echo "TLS_HLG=`kubectl get secrets --namespace $NS_ENV_HLG |grep $SECRET_TLS |awk '{print $1}'`" >> $GITHUB_ENV
          echo "TLS_PRD=`kubectl get secrets --namespace $NS_ENV_PRD |grep $SECRET_TLS |awk '{print $1}'`" >> $GITHUB_ENV

      - name: Create TLS Secret
        if: ${{ inputs.create-secret == true && env.TLS_DEV && env.TLS_HLG && env.TLS_PRD }}
        run: |
          cd /home/runner/work/${{ github.event.repository.name }}/${{ github.event.repository.name }}/scripts/certs
          KEY=`ls |grep key`
          CRT=`ls |grep crt`
          kubectl create secret tls $SECRET_TLS --key="$KEY" --cert="$CRT" --namespace ${{ env.NS_ENV_DEV }}
          kubectl create secret tls $SECRET_TLS --key="$KEY" --cert="$CRT" --namespace ${{ env.NS_ENV_HLG }}
          kubectl create secret tls $SECRET_TLS --key="$KEY" --cert="$CRT" --namespace ${{ env.NS_ENV_PRD }}

      - name: List TLS Secret
        run: |
          kubectl get secrets --all-namespaces |egrep "${{ env.NS_ENV_DEV }}|${{ env.NS_ENV_HLG }}|${{ env.NS_ENV_PRD }}"