name: 2-DEPLOY-FLASK-APP
on:
  push:
    branches: [release, feature, hotfix, task]
  workflow_dispatch:
    inputs:
      build-push-image:
        description: 'Run build and publish?'
        default: false
        required: false
        type: boolean

env: ## Variables available in this workflow
  PROJECT_ID: "leosete-devops-4"
  CLUSTER_NAME: "tembici-cluster-prod"
  REGION: "us-central1"
  REPOSITORY: "sre-docker-registry"
  IMAGE_NAME: "flask-app"
  APPROVERS_DEV: "7700472077"
  APPROVERS_HLG: "7700472077"
  APPROVERS_PRD: "7700472077"

jobs:
  build_app:
    runs-on: ubuntu-latest
    # env:
    #   APP_ENV: "dev"
    steps:
      - name: 1-CHECKOUT ACTIONS
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - id: auth
        name: 2-AUTHENTICATE TO GOOGLE CLOUD
        uses: google-github-actions/auth@v0
        with:
          credentials_json: ${{ secrets.GCP_TERRAFORM_SVC_ACCOUNT }}

      - name: 3-SETUP CLOUD SDK
        uses: google-github-actions/setup-gcloud@v0

      - name: 4-GET CREDENTIALS
        uses: 'google-github-actions/get-gke-credentials@v0'
        with:
          cluster_name: ${{ env.CLUSTER_NAME }}
          location: ${{ env.REGION }}

      # - name: Login to Artifact Registry
      #   uses: docker/login-action@v1
      #   with:
      #     registry: ${{ env.REGION }}-docker.pkg.dev
      #     username: oauth2accesstoken
      #     password: ${{ steps.auth.outputs.access_token }}

      - name: Get tag
        id: get-tag
        run: echo ::set-output name=short_ref::${GITHUB_REF#refs/*/}

      - id: docker-push-tagged
        name: Tag Docker image and push to Google Artifact Registry
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: |
            ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ steps.get-tag.outputs.short_ref }}
            ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:latest


      # - name: 5-BUILD DOCKER IMAGE
      #   if: ${{ inputs.build-push-image == true }}
      #   run: docker build -t ${{ env.IMAGE_NAME }}:latest .

      # - name: 6-AUTOMATIC TAGGING OF RELEASES
      #   if: ${{ inputs.build-push-image == true }}
      #   id: increment-git-tag
      #   run: |
      #     bash ./scripts/git_update.sh -v major

      - name: 7-TESTE FLASK APP
        if: ${{ inputs.build-push-image == true }}
        run: |
          docker run -t ${{ env.IMAGE_NAME }}:latest bash -c "BASE_API_ENV=test pipenv run pytest"

      # - name: 8-CONFIGURE DOCKER CLIENT
      #   if: ${{ inputs.build-push-image == true }}
      #   run: |
      #     gcloud auth configure-docker  ${{ env.REGION }}-docker.pkg.dev --quiet

      # - name: 9-PUSH DOCKER IMAGE TO ARTIFACT REGISTRY
      #   if: ${{ inputs.build-push-image == true }}
      #   env:
      #     GIT_TAG: ${{ steps.increment-git-tag.outputs.git-tag }}
      #   run: |
      #     docker tag ${{ env.IMAGE_NAME }}:latest  ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:latest
      #     docker tag ${{ env.IMAGE_NAME }}:latest  ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:$GIT_TAG
      #     docker push  ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:latest
      #     docker push  ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:$GIT_TAG

  deploy_app_dev:
    runs-on: ubuntu-latest
    needs: build_app
    env:
      NS_APP: "tembici-sre-apps-dev"
      WORK_DIR: "./k8s"
      APP_ENV: "dev"
    defaults:
      run:
        working-directory: ${{ env.WORK_DIR }}

    steps:

      - name: 1-CHECKOUT ACTIONS
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: 2-VERIFY ISSUES TO APPROVE OR DENY DEPLOY
        run: echo Waiting approval to deploy in ${{ env.NS_APP }}

      - name: 3-SETUP MANUAL APPROVAL
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.token }}
          approvers: ${{ env.APPROVERS_DEV }}
          
      - name: 4-DEPLOY TO DEVELOPMENT
        run: echo deploying in ${{ env.NS_APP }}

      - id: auth
        name: 5-AUTHENTICATE TO GOOGLE CLOUD
        uses: google-github-actions/auth@v0
        with:
          credentials_json: ${{ secrets.GCP_TERRAFORM_SVC_ACCOUNT }}

      - name: 6-SETUP CLOUD SDK
        uses: google-github-actions/setup-gcloud@v0

      - name: 7-GET CREDENTIALS
        uses: 'google-github-actions/get-gke-credentials@v0'
        with:
          cluster_name: ${{ env.CLUSTER_NAME }}
          location: ${{ env.REGION }}

      - name: 8-NAMESPACE TO USE
        run: |
          kubectl get ns ${{ env.NS_APP }}
          echo "The current Namespace is ${{ env.NS_APP }}"

      # - name: 9-SETUP KUSTOMIZE
      #   uses: imranismail/setup-kustomize@v1

      - name: 10-DEPLOY FLASK APP IN DEV
        if: ${{ inputs.build-push-image == true }}
        run: |
          kubectl apply -f deploy-${{ env.APP_ENV }}.yaml

  deploy_app_hlg:
    runs-on: ubuntu-latest
    needs: deploy_app_dev
    env:
      NS_APP: "tembici-sre-apps-hlg"
      WORK_DIR: "./k8s"
      APP_ENV: "hlg"
    defaults:
      run:
        working-directory: ${{ env.WORK_DIR }}

    steps:

      - name: 1-CHECKOUT ACTIONS
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: 2-VERIFY ISSUES TO APPROVE OR DENY DEPLOY
        run: echo Waiting approval to deploy in ${{ env.NS_APP }}

      - name: 3-SETUP MANUAL APPROVAL
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.token }}
          approvers: ${{ env.APPROVERS_HLG }}
          
      - name: 4-DEPLOY TO HOMOLOG
        run: echo deploying in ${{ env.NS_APP }}

      - id: auth
        name: 5-AUTHENTICATE TO GOOGLE CLOUD
        uses: google-github-actions/auth@v0
        with:
          credentials_json: ${{ secrets.GCP_TERRAFORM_SVC_ACCOUNT }}

      - name: 6-SETUP CLOUD SDK
        uses: google-github-actions/setup-gcloud@v0

      - name: 7-GET CREDENTIALS
        uses: 'google-github-actions/get-gke-credentials@v0'
        with:
          cluster_name: ${{ env.CLUSTER_NAME }}
          location: ${{ env.REGION }}

      - name: 8-NAMESPACE TO USE
        run: |
          kubectl get ns ${{ env.NS_APP }}
          echo "The current Namespace is ${{ env.NS_APP }}"

      # - name: 9-SETUP KUSTOMIZE
      #   uses: imranismail/setup-kustomize@v1

      - name: 10-DEPLOY FLASK APP IN HLG
        if: ${{ inputs.build-push-image == true }}
        run: |
          kubectl apply -f deploy-${{ env.APP_ENV }}.yaml

  deploy_app_prd:
    runs-on: ubuntu-latest
    needs: deploy_app_hlg
    env:
      NS_APP: "tembici-sre-apps-prd"
      WORK_DIR: "./k8s"
      APP_ENV: "hlg"
    defaults:
      run:
        working-directory: ${{ env.WORK_DIR }}

    steps:

      - name: 1-CHECKOUT ACTIONS
        uses: actions/checkout@v3

      - name: 2-VERIFY ISSUES TO APPROVE OR DENY DEPLOY
        run: echo Waiting approval to deploy in ${{ env.NS_APP }}

      - name: 3-SETUP MANUAL APPROVAL
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.token }}
          approvers: ${{ env.APPROVERS_HLG }}
          
      - name: 4-DEPLOY TO PRODUCTION
        run: echo deploying in ${{ env.NS_APP }}

      - id: auth
        name: 5-AUTHENTICATE TO GOOGLE CLOUD
        uses: google-github-actions/auth@v0
        with:
          credentials_json: ${{ secrets.GCP_TERRAFORM_SVC_ACCOUNT }}

      - name: 6-SETUP CLOUD SDK
        uses: google-github-actions/setup-gcloud@v0

      - name: 7-GET CREDENTIALS
        uses: 'google-github-actions/get-gke-credentials@v0'
        with:
          cluster_name: ${{ env.CLUSTER_NAME }}
          location: ${{ env.REGION }}

      - name: 8-NAMESPACE TO USE
        run: |
          kubectl get ns ${{ env.NS_APP }}
          echo "The current Namespace is ${{ env.NS_APP }}"

      # - name: 9-SETUP KUSTOMIZE
      #   uses: imranismail/setup-kustomize@v1

      - name: 10-DEPLOY FLASK APP IN HLG
        if: ${{ inputs.build-push-image == true }}
        run: |
          kubectl apply -f deploy-${{ env.APP_ENV }}.yaml