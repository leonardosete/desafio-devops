name: 2-DEPLOY-FLASK-APP
on:
  push:
    branches: [release, feature, hotfix, task]
  workflow_dispatch:

env: ## Variables available in this workflow
  PROJECT_ID: "fork-project-teste"
  CLUSTER_NAME: "tembici-cluster-prod"
  REGION: "us-central1"
  REPOSITORY: "sre-docker-registry"
  IMAGE_NAME: "flask-app"
  APPROVERS: "7700472077"

jobs:
  build_app:
    runs-on: ubuntu-latest
    steps:
      - name: 1-CHECKOUT ACTIONS
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: 2-AUTHENTICATE TO GOOGLE CLOUD
        id: auth
        uses: google-github-actions/auth@v0
        with:
          credentials_json: ${{ secrets.GCP_TERRAFORM_SVC_ACCOUNT }}

      - name: 3-SETUP CLOUD SDK
        uses: google-github-actions/setup-gcloud@v0

      - name: 4-GET CREDENTIALS
        uses: 'google-github-actions/get-gke-credentials@v0'
        with:
          cluster_name: ${{ env.CLUSTER_NAME }}
          location: ${{ env.REGION }}

      - name: 5-BUILD DOCKER IMAGE
        run: docker build -t ${{ env.IMAGE_NAME }}:latest .

      - name: 6-AUTOMATIC TAGGING OF RELEASES
        id: increment-git-tag
        run: |
          bash ./scripts/git_update.sh -v major

      - name: 7-TESTE FLASK APP
        run: |
          docker run -t ${{ env.IMAGE_NAME }}:latest bash -c "BASE_API_ENV=test pipenv run pytest"

      - name: 8-CONFIGURE DOCKER CLIENT
        run: |
          gcloud auth configure-docker  ${{ env.REGION }}-docker.pkg.dev --quiet

      - name: 9-PUSH DOCKER IMAGE TO ARTIFACT REGISTRY
        env:
          GIT_TAG: ${{ steps.increment-git-tag.outputs.git-tag }}
        run: |
          docker tag ${{ env.IMAGE_NAME }}:latest  ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:latest
          docker tag ${{ env.IMAGE_NAME }}:latest  ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:$GIT_TAG
          docker push  ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:latest
          docker push  ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:$GIT_TAG

  deploy_apps:
    strategy:
      matrix:
        app_env: [dev, hlg, prd]
      fail-fast: true ## se uma execução do job falhar, vai parar tudo
      max-parallel: 1
    runs-on: ubuntu-latest
    env:
      NS_APP: "tembici-sre-apps-${{ matrix.app-env }}"
      WORK_DIR: "./k8s"
      APP_ENV: "${{ matrix.app-env }}"
    defaults:
      run:
        working-directory: ${{ env.WORK_DIR }}

    steps:
      - name: 1-CHECKOUT ACTIONS
        uses: actions/checkout@v3

      - name: 2-VERIFY ISSUES TO APPROVE OR DENY DEPLOY
        run: echo Waiting approval to deploy in ${{ env.NS_APP }}

      - name: 3-SETUP MANUAL APPROVAL
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.token }}
          approvers: ${{ env.APPROVERS }}
          issue-title: "Deploying flask-app in ${{ matrix.app-env }}"
          
      - name: 4-DEPLOY TO PRODUCTION
        run: echo deploying in ${{ env.NS_APP }}

      - id: auth
        name: 5-AUTHENTICATE TO GOOGLE CLOUD
        uses: google-github-actions/auth@v0
        with:
          credentials_json: ${{ secrets.GCP_TERRAFORM_SVC_ACCOUNT }}

      - name: 6-SETUP CLOUD SDK
        uses: google-github-actions/setup-gcloud@v0

      - name: 7-GET CREDENTIALS
        uses: 'google-github-actions/get-gke-credentials@v0'
        with:
          cluster_name: ${{ env.CLUSTER_NAME }}
          location: ${{ env.REGION }}

      - name: 8-NAMESPACE TO USE
        continue-on-error: true
        run: |
          kubectl get ns ${{ env.NS_APP }}
          echo "The current Namespace is ${{ env.NS_APP }}"

      - name: 9-DEPLOY FLASK APP IN ${{ matrix.app-env }}
        run: |
          kubectl apply -f deploy-${{ env.APP_ENV }}.yaml