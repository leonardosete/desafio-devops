name: 2-DEPLOY-FLASK-APP
on:
  push:
    branches: [release*, feature*, hotfix*]
  workflow_dispatch:
    # inputs:
    #   approvers:
    #     description: 'The github user which can approve/deny deploys:'
    #     required: true

env: ## Variables available in this workflow
  PROJECT_ID: "fork-project-teste"
  CLUSTER_NAME: "tembici-cluster-prod"
  REGION: "us-central1"
  REPOSITORY: "sre-docker-registry"
  IMAGE_NAME: "flask-app"
  APPROVERS: "7700472077"
jobs:
  build_app:
    runs-on: ubuntu-latest
    steps:
      - name: 1-CHECKOUT ACTIONS
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # - name: 2-AUTHENTICATE TO GOOGLE CLOUD
      #   id: auth
      #   uses: google-github-actions/auth@v0
      #   with:
      #     credentials_json: ${{ secrets.GCP_TERRAFORM_SVC_ACCOUNT }}

      # - name: 3-SETUP CLOUD SDK
      #   uses: google-github-actions/setup-gcloud@v0

      # - name: 4-GET CREDENTIALS
      #   uses: 'google-github-actions/get-gke-credentials@v0'
      #   with:
      #     cluster_name: ${{ env.CLUSTER_NAME }}
      #     location: ${{ env.REGION }}

      # - name: 5-BUILD DOCKER IMAGE
      #   run: |
      #     docker build -t ${{ env.IMAGE_NAME }}:latest .
      #     gcloud auth configure-docker  ${{ env.REGION }}-docker.pkg.dev --quiet

      - name: 6-GET BRANCH NAME
        run: |
          echo "BRANCH=${GITHUB_REF#refs/heads/}"
          echo "BRANCH_PREFIX=${BRANCH%%[/-]*}" >> $GITHUB_ENV

      # - name: 6-GET "BRANCH_PREFIX
      #   run: |
      #     echo "BRANCH_PREFIX=${BRANCH%%[/-]*}" >> $GITHUB_ENV

      # - name: 7-DEFINE SEMANTIC
      #   run: |
          
      #     if [[ $BRANCH_PREFIX == 'release' ]]
      #     then 
      #       echo "SEMANTIC=major" >> $GITHUB_ENV
      #     elif [[ $BRANCH_PREFIX == 'feature' ]]
      #     then 
      #       echo "SEMANTIC=minor" >> $GITHUB_ENV
      #     elif [[ $BRANCH_PREFIX == 'hotfix' ]]
      #     then 
      #       echo "SEMANTIC=patch" >> $GITHUB_ENV
      #     else
      #       echo "Any branch compatible with semantic version"
      #       exit 1
      #     fi

      - name: 7-GET BRANCH NAME
        run: |
          echo ${{ env.BRANCH_PREFIX }}
      
      # - name: 7-AUTOMATIC TAGGING OF RELEASES
      #   if: ${{ startsWith(env.BRANCH, 'release') }}
      #   id: increment-git-tag
      #   run: |
      #     bash ./scripts/git_update.sh -v major

      # - name: 7-AUTOMATIC TAGGING OF RELEASES
      #   if: ${{ startsWith(env.BRANCH, 'release') }}
      #   id: increment-git-tag-major
      #   run: |
      #     bash ./scripts/git_update.sh -v major


      # - name: 8-TESTING APPLICATION
      #   run: |
      #     docker run -t ${{ env.IMAGE_NAME }}:latest bash -c "BASE_API_ENV=test pipenv run pytest"

      # - name: 9-PUSH DOCKER IMAGE TO ARTIFACT REGISTRY
      #   env:
      #     GIT_TAG: ${{ steps.increment-git-tag.outputs.git-tag }}
      #   run: |
      #     docker tag ${{ env.IMAGE_NAME }}:latest  ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:latest
      #     docker tag ${{ env.IMAGE_NAME }}:latest  ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:$GIT_TAG
      #     docker push  ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:latest
      #     docker push  ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:$GIT_TAG

  # deploy_apps:
  #   needs: build_app
  #   strategy:
  #     matrix:
  #       app_env: [dev, hlg, prd]
  #       include:
  #         - app_env: dev
  #           env_deploy: DEVELOPMENT
  #         - app_env: hlg
  #           env_deploy: HOMOLOG
  #         - app_env: prd
  #           env_deploy: PRODUCTION
  #     fail-fast: true ## se uma execução do job falhar, vai parar tudo
  #     max-parallel: 1
  #   runs-on: ubuntu-latest
  #   env: ## Variables available in this job
  #     NS_APP: "tembici-sre-apps-${{ matrix.app_env }}"
  #     WORK_DIR: "./k8s"
  #   defaults:
  #     run:
  #       working-directory: ${{ env.WORK_DIR }}

  #   steps:
  #     - name: 1-CHECKOUT ACTIONS
  #       uses: actions/checkout@v3
  
  #     - name: 2-AUTHENTICATE TO GOOGLE CLOUD
  #       id: auth
  #       uses: google-github-actions/auth@v0
  #       with:
  #         credentials_json: ${{ secrets.GCP_TERRAFORM_SVC_ACCOUNT }}

  #     - name: 3-SETUP CLOUD SDK
  #       uses: google-github-actions/setup-gcloud@v0

  #     - name: 4-GET GKE CREDENTIALS
  #       uses: 'google-github-actions/get-gke-credentials@v0'
  #       with:
  #         cluster_name: ${{ env.CLUSTER_NAME }}
  #         location: ${{ env.REGION }}

  #     - name: 5-CHECK NAMESPACE TO DEPLOY
  #       continue-on-error: true
  #       run: |
  #         kubectl get ns ${{ env.NS_APP }}
  #         echo "The current Namespace is ${{ env.NS_APP }}"

  #     - name: 6-APPROVE OR DENY DEPLOY
  #       uses: trstringer/manual-approval@v1
  #       with:
  #         secret: ${{ github.token }}
  #         approvers: ${{ env.APPROVERS }}
  #         issue-title: "Deploying flask-app in ${{ matrix.env_deploy }}"

  #     - name: 7-APPLICATION APPROVED TO DEPLOY IN ${{ matrix.env_deploy }}
  #       run: |
  #         sleep 30
  #         kubectl apply -f deploy-${{ matrix.app_env }}.yaml