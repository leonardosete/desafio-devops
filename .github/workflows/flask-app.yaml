name: Flask App
on:
  push:
    branches: [release, feature, hotfix, task]
  workflow_dispatch:
    inputs:
      delete-app:
        description: 'Delete App K8s Resources?'
        default: false
        required: false
        type: boolean
      deploy-app-env:
        description: 'Select a k8s namespace to deploy/delete'
        required: true
        default: 'tembici-sre-apps-dev'
        type: choice
        options:
        - tembici-sre-apps-dev 
        - tembici-sre-apps-hlg
        - tembici-sre-apps-prod ## Add namespaces here if needed.

env: ## Variables available in this workflow
  NS_ENV: ${{ inputs.deploy-app-env }}
  PROJECT_ID: "tembici-sre"
  CLUSTER_NAME: "tembici-sre-cluster-prod"
  REGION: "us-central1"
  REPOSITORY: "sre-docker-registry"
  IMAGE_NAME: flask-app


jobs:
  manage_app:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Actions
        uses: actions/checkout@v3

      - id: auth
        name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v0
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0

      - name: Get Credentials
        uses: 'google-github-actions/get-gke-credentials@v0'
        with:
          cluster_name: ${{ env.CLUSTER_NAME }}
          location: ${{ env.REPOSITORY }}

## TESTE BUILD E PUSH ##
      - name: Build Docker Image
        run: docker build -t ${{ env.IMAGE_NAME }}:latest ./flask

      - name: Automatic Tagging of Releases
        id: increment-git-tag
        run: |
          bash ./flask/scripts/git_update.sh -v major

      - name: Configure Docker Client
        run: |
          gcloud auth configure-docker  ${{ env.REPOSITORY }}.pkg.dev --quiet

      - name: Push Docker Image to Artifact Registry
        env:
          GIT_TAG: ${{ steps.increment-git-tag.outputs.git-tag }}
        run: |
          docker tag ${{ env.IMAGE_NAME }}:latest  ${{ env.REPOSITORY }}.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:latest
          docker tag ${{ env.IMAGE_NAME }}:latest  ${{ env.REPOSITORY }}.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:$GIT_TAG
          docker push  ${{ env.REPOSITORY }}.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:latest
          docker push  ${{ env.REPOSITORY }}.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:$GIT_TAG

  
      # - name: Namespace to Deploy
      #   run: |
      #     kubectl get ns $NS_ENV |grep $NS_ENV

      ## BUILD >> BUSCAR/PULL DA IMAGEM BASE + COD DO APP
      ## TEST DO APP
      ## PUBLISH DO APP >> ENVIAR PARA ARTIFACT REGISTRY - GCP
      ## GERAR VERSIONAMENTO - GIT VERSION???
      ## CONTROLAR RELEASES - DE QUAL FORMA (XLRELEASE)???
      ## MONITORAÇÃO
      ## LOGS
      ## SEGURANÇA DA CONTA GCP - IAM/SERVICE ACCOUNTS?
      ## SEGURANÇA DO CLUSTER GKE - RBAC???

      # - name: Apply/Create K8s Resources
      #   if: ${{ inputs.delete-app == false && inputs.deploy-app-env }}
      #   run: |
      #     cd k8s
      #     kubectl apply -f '*.yaml' -n ${{ inputs.deploy-app-env }}
        
      # - name: Delete K8s Resources
      #   if: ${{ inputs.delete-app == true && inputs.deploy-app-env }}
      #   run: |
      #     cd k8s
      #     kubectl delete -f '*.yaml' -n ${{ inputs.deploy-app-env }}