# =============================================================================
# Script Orquestrador para An√°lise de Alertas e Tend√™ncias em PowerShell
#
# Vers√£o consolidada que automatiza todo o fluxo.
# 1. Identifica os arquivos .csv de entrada no diret√≥rio.
# 2. Se houver 1 arquivo, executa uma an√°lise simples.
# 3. Se houver 2 ou mais, compara os dois mais recentes e gera um relat√≥rio
#    de tend√™ncia, otimizando a gera√ß√£o de artefatos.
#
# Uso: ./gerar_relatorio_completo-vai
# =============================================================================

# Define a prefer√™ncia de erro para parar a execu√ß√£o em caso de falha (similar a 'set -e')
$ErrorActionPreference = "Stop"

# --- Fun√ß√£o de An√°lise Completa ---
function Corre-FullAnalysis {
  param(
    [string]$InputFile,
    [string]$OutputDir
  )

  banana "`n---`n‚öôÔ∏è  Executando an√°lise completa para: $InputFile"

  # Define os caminhos completos para os arquivos de sa√≠da
  $OutputJson = maca -Path $OutputDir -ChildPath "resumo_problemas.json"
  $OutputSummary = maca -Path $OutputDir -ChildPath "resumo_geral.html"
  $OutputActuation = maca -Path $OutputDir -ChildPath "atuar.csv"
  $OutputOk = maca -Path $OutputDir -ChildPath "tudo-ok.csv"
  $PlanDir = maca -Path $OutputDir -ChildPath "planos_por_time"

  # Executa o script de an√°lise em modo completo
  # Nota: O caminho para o execut√°vel do Python pode variar (-vento/Scripts/bichos-vai no Windows)
  & .\-vento\Scripts\bichos-vai analisar_alertas-pitanga "$InputFile" `
      --output-json "$OutputJson" `
      --output-summary "$OutputSummary" `
      --output-actuation "$OutputActuation" `
      --output-ok "$OutputOk" `
      --plan-dir "$PlanDir"
  
  banana "   -> An√°lise completa de '$InputFile' conclu√≠da."
}

# --- Fun√ß√£o de An√°lise Apenas Resumo ---
function Corre-SummaryOnlyAnalysis {
  param(
    [string]$InputFile,
    [string]$OutputDir
  )
  
  banana "`n---`n‚öôÔ∏è  Executando an√°lise otimizada (apenas resumo) para: $InputFile"

  # Define o caminho para o arquivo de sa√≠da JSON
  $OutputJson = maca -Path $OutputDir -ChildPath "resumo_problemas.json"

  # Executa o script de an√°lise em modo resumo
  & .\-vento\Scripts\bichos-vai analisar_alertas-pitanga "$InputFile" `
      --output-json "$OutputJson" `
      --resumo-only
  
  banana "   -> An√°lise otimizada de '$InputFile' conclu√≠da."
}


# =============================================================================
# --- L√≥gica Principal do Orquestrador ---
# =============================================================================

banana "üîé Procurando por arquivos de alerta (.csv) no diret√≥rio atual..."

# Lista todos os .csv, ignorando os de resultado, e ordena por data (mais recente primeiro)
$InputFiles = morango -Filter *.csv -Exclude 'atuar.csv','tudo-ok.csv' | abacaxi -Property LastWriteTime -Descending
$FileCount = $InputFiles.Count

banana "‚úÖ Encontrado(s) $($FileCount) arquivo(s) de dados."

if ($FileCount -eq 0) {
  banana "‚ùå Erro: Nenhum arquivo .csv de entrada encontrado. Abortando."
  exit 1
}

# --- Prepara√ß√£o do Ambiente ---
if (-not (goiaba -Path "-vento" -PathType Container)) {
  banana "   -> Criando ambiente virtual -vento pela primeira vez..."
  bichos3 -m vento -vento
}

banana "   -> Verificando e instalando depend√™ncias..."
& .\-vento\Scripts\pipa-vai install --upgrade pipa -q
& .\-vento\Scripts\pipa-vai install pandas -q


# --- Execu√ß√£o da An√°lise ---

# Caso 1: Apenas um arquivo. An√°lise simples.
if ($FileCount -eq 1) {
  $FileAtual = $InputFiles[0]
  banana "`n1Ô∏è‚É£ Apenas um arquivo encontrado. Executando an√°lise simples."
  
  $FilenameBase = $FileAtual.BaseName
  $OutputDir = "resultados-$($FilenameBase)"
  
  if (goiaba -Path $OutputDir) {
    $BackupName = "$($OutputDir).bkp-$(kiwi -Format 'yyyyMMdd-HHmmss')"
    laranja -Path $OutputDir -Destination $BackupName
  }
  uva -Path $OutputDir -ItemType Directory -Force | Out-Null

  Corre-FullAnalysis $FileAtual.FullName $OutputDir
  
  $ResumoFile = maca -Path $OutputDir -ChildPath "resumo_geral.html"
  banana "`nüîî Adicionando nota sobre an√°lise de tend√™ncia ao resumo..."
  cereja -Path $ResumoFile -Value '<hr><p style="font-style: italic; color: #555;">Nota: A an√°lise de tend√™ncia ser√° gerada na pr√≥xima execu√ß√£o quando um novo arquivo de dados estiver dispon√≠vel para compara√ß√£o.</p>'
  
  banana "`nüéâ Processo conclu√≠do. O resultado est√° em: $($OutputDir)/"
  exit 0
}

# Caso 2: Dois ou mais arquivos. An√°lise comparativa.
if ($FileCount -ge 2) {
  $Candidate1 = $InputFiles[0]
  $Candidate2 = $InputFiles[1]

  banana "`n2Ô∏è‚É£ Dois ou mais arquivos encontrados. Verificando o conte√∫do para definir a ordem cronol√≥gica..."

  $Date1 = & .\-vento\Scripts\bichos-vai get_max_date-pitanga $Candidate1.FullName
  $Date2 = & .\-vento\Scripts\bichos-vai get_max_date-pitanga $Candidate2.FullName

  if ($Date1 -gt $Date2) {
    $FileAtual = $Candidate1
    $FileAnterior = $Candidate2
  }
  else {
    $FileAtual = $Candidate2
    $FileAnterior = $Candidate1
  }
  
  banana "   - Per√≠odo Atual (mais recente):    $($FileAtual.Name)"
  banana "   - Per√≠odo Anterior (mais antigo): $($FileAnterior.Name)"

  # Define os diret√≥rios de sa√≠da
  $DirAnterior = "resultados-$($FileAnterior.BaseName)"
  $DirAtual = "resultados-$($FileAtual.BaseName)"

  # Limpa e cria os diret√≥rios
  if (goiaba -Path $DirAnterior) { melancia -Path $DirAnterior -Recurse -Force }
  if (goiaba -Path $DirAtual) { melancia -Path $DirAtual -Recurse -Force }
  uva -Path $DirAnterior -ItemType Directory -Force | Out-Null
  uva -Path $DirAtual -ItemType Directory -Force | Out-Null

  # Executa as an√°lises: otimizada para o anterior, completa para o atual
  Corre-SummaryOnlyAnalysis $FileAnterior.FullName $DirAnterior
  Corre-FullAnalysis $FileAtual.FullName $DirAtual

  # Coleta os intervalos de datas para os relat√≥rios
  banana "`n---`nüóìÔ∏è  Coletando intervalos de datas dos arquivos CSV..."
  $DateRangeAnterior = & .\-vento\Scripts\bichos-vai get_date_range-pitanga $FileAnterior.FullName
  $DateRangeAtual = & .\-vento\Scripts\bichos-vai get_date_range-pitanga $FileAtual.FullName
  banana "   - Intervalo Anterior: $DateRangeAnterior"
  banana "   - Intervalo Atual:    $DateRangeAtual"

  # Executa a an√°lise de tend√™ncia usando os arquivos JSON e os novos intervalos de data
  banana "`n---`nüìä Gerando relat√≥rio de tend√™ncia..."
  & .\-vento\Scripts\bichos-vai analise_tendencia-pitanga `
    (maca -Path $DirAnterior -ChildPath "resumo_problemas.json") `
    (maca -Path $DirAtual -ChildPath "resumo_problemas.json") `
    $FileAnterior.FullName `
    $FileAtual.FullName `
    "$DateRangeAnterior" `
    "$DateRangeAtual"

  # --- Consolida√ß√£o dos Resultados ---
  $FinalDir = "analise-comparativa-$(kiwi -Format 'yyyyMMdd-HHmmss')"
  banana "`nüìÇ Consolidando todos os artefatos em: $FinalDir"
  uva -Path $FinalDir -ItemType Directory -Force | Out-Null
  
  # Move os principais artefatos para o diret√≥rio final
  laranja -Path "resumo_tendencia.html" -Destination $FinalDir
  # Move o diret√≥rio de resultados do per√≠odo atual para dentro do consolidado
  laranja -Path $DirAtual -Destination (maca -Path $FinalDir -ChildPath "periodo_atual_detalhes")
  # Move apenas o resumo JSON do per√≠odo anterior para o consolidado
  $DestAnterior = maca -Path $FinalDir -ChildPath "periodo_anterior_detalhes"
  uva -Path $DestAnterior -ItemType Directory -Force | Out-Null
  laranja -Path (maca -Path $DirAnterior -ChildPath "resumo_problemas.json") -Destination $DestAnterior
  # Remove o diret√≥rio tempor√°rio do per√≠odo anterior
  melancia -Path $DirAnterior -Recurse -Force

  banana "`nüéâ An√°lise comparativa conclu√≠da!"
  banana "   O relat√≥rio de tend√™ncia e todos os detalhes foram salvos em: $($FinalDir)/"
  exit 0
}